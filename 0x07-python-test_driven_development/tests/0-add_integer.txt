A test to for adding two integers

Import Python module + collections
>>> import sys
>>> sys.path.insert(1, '../')
>>> my_lib = __import__("0-add_integer")
>>> my_add_integer = my_lib.add_integer

# Normal addition test
>>> my_add_integer(0)
98
>>> my_add_integer(-1)
97
>>> my_add_integer(10.5)
108

# Type Errors
>>> my_add_integer(10+5j)
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> my_add_integer([])
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> my_add_integer({})
Traceback (most recent call last):
...
TypeError: a must be an integer
>>> my_add_integer(set())
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> my_add_integer("")
Traceback (most recent call last):
...
TypeError: a must be an integer

# Two input addition type errors
>>> my_add_integer(10, 10+5j)
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> my_add_integer(10, [])
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> my_add_integer(10, {})
Traceback (most recent call last):
...
TypeError: b must be an integer
>>> my_add_integer(10, set())
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> my_add_integer(10, "")
Traceback (most recent call last):
...
TypeError: b must be an integer

# OverflowError handling
>>> my_add_integer(1e10000000, 1)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

>>> my_add_integer(1, 1e1000000000)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

# Handling float('NaN')
>>> my_add_integer(float('NaN'), 1)
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
>>> my_add_integer(1, float('NaN'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
